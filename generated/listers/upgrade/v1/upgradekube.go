/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/arshukla98/sample-controller/pkg/apis/upgrade/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UpgradeKubeLister helps list UpgradeKubes.
// All objects returned here must be treated as read-only.
type UpgradeKubeLister interface {
	// List lists all UpgradeKubes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.UpgradeKube, err error)
	// UpgradeKubes returns an object that can list and get UpgradeKubes.
	UpgradeKubes(namespace string) UpgradeKubeNamespaceLister
	UpgradeKubeListerExpansion
}

// upgradeKubeLister implements the UpgradeKubeLister interface.
type upgradeKubeLister struct {
	indexer cache.Indexer
}

// NewUpgradeKubeLister returns a new UpgradeKubeLister.
func NewUpgradeKubeLister(indexer cache.Indexer) UpgradeKubeLister {
	return &upgradeKubeLister{indexer: indexer}
}

// List lists all UpgradeKubes in the indexer.
func (s *upgradeKubeLister) List(selector labels.Selector) (ret []*v1.UpgradeKube, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.UpgradeKube))
	})
	return ret, err
}

// UpgradeKubes returns an object that can list and get UpgradeKubes.
func (s *upgradeKubeLister) UpgradeKubes(namespace string) UpgradeKubeNamespaceLister {
	return upgradeKubeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UpgradeKubeNamespaceLister helps list and get UpgradeKubes.
// All objects returned here must be treated as read-only.
type UpgradeKubeNamespaceLister interface {
	// List lists all UpgradeKubes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.UpgradeKube, err error)
	// Get retrieves the UpgradeKube from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.UpgradeKube, error)
	UpgradeKubeNamespaceListerExpansion
}

// upgradeKubeNamespaceLister implements the UpgradeKubeNamespaceLister
// interface.
type upgradeKubeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UpgradeKubes in the indexer for a given namespace.
func (s upgradeKubeNamespaceLister) List(selector labels.Selector) (ret []*v1.UpgradeKube, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.UpgradeKube))
	})
	return ret, err
}

// Get retrieves the UpgradeKube from the indexer for a given namespace and name.
func (s upgradeKubeNamespaceLister) Get(name string) (*v1.UpgradeKube, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("upgradekube"), name)
	}
	return obj.(*v1.UpgradeKube), nil
}
